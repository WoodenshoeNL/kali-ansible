#!/usr/bin/env python3
"""
quiet_firefox.py  –  Silences background traffic in Firefox.

Writes/overwrites <profile>/user.js with a hardened set of prefs.
Tested  on Firefox 127 (July 2025) on Linux, macOS and Windows.
"""

import argparse, configparser, json, os, sys, textwrap
from pathlib import Path

# ---- prefs we want ----------------------------------------------------------
PREFS = {
    # Connectivity probes
    "network.captive-portal-service.enabled": False,   # :contentReference[oaicite:0]{index=0}
    "network.connectivity-service.enabled":    False,  # :contentReference[oaicite:1]{index=1}

    # Web-Push / notifications
    "dom.push.enabled":                 False,         # :contentReference[oaicite:2]{index=2}
    "dom.push.connection.enabled":      False,
    "dom.push.serverURL":               "",

    # Telemetry / studies
    "toolkit.telemetry.enabled":        False,
    "app.shield.optoutstudies.enabled": False,
    "app.normandy.enabled":             False,

    # Safe-Browsing*  (turn back on if you rely on phishing/malware warnings)
    "browser.safebrowsing.malware.enabled":   False,
    "browser.safebrowsing.phishing.enabled":  False,
    "browser.safebrowsing.downloads.enabled": False,

    # Extension & block-list auto-updates
    "extensions.update.enabled":        False,
    "extensions.blocklist.enabled":     False,

    # Speculative connections & prefetching
    "network.dns.disablePrefetch":      True,
    "network.prefetch-next":            False,
    "network.http.speculative-parallel-limit": 0,

    # Thumbnails captured in the background
    "browser.pagethumbnails.capturing_disabled": True,
}

BANNER = textwrap.dedent("""\
    // -------------------------------------------------------------------
    // Generated by quiet_firefox.py – {count} prefs to silence background
    // traffic. Remove any line you don’t want enforced.
    // -------------------------------------------------------------------
""")

# ---------------------------------------------------------------------------

def platform_profiles() -> list[Path]:
    """
    Return a list of profile directories discovered via profiles.ini.
    """
    if sys.platform.startswith("win"):
        base = Path(os.getenv("APPDATA")) / "Mozilla" / "Firefox"
    elif sys.platform == "darwin":
        base = Path.home() / "Library" / "Application Support" / "Firefox"
    else:  # Linux, BSD, etc.
        base = Path.home() / ".mozilla" / "firefox"

    ini = base / "profiles.ini"
    if not ini.exists():
        print("Could not find profiles.ini – is Firefox installed?", file=sys.stderr)
        return []

    cp = configparser.ConfigParser()
    cp.read(ini)
    profs = []
    for section in cp.sections():
        if cp.has_option(section, "Path"):
            path = cp.get(section, "Path")
            # “IsRelative=1” ⇒ path is relative to base
            if cp.getint(section, "IsRelative", fallback=1):
                profs.append(base / path)
            else:
                profs.append(Path(path))
    return profs

def write_userjs(profile: Path, prefs: dict, dry=False):
    profile.mkdir(parents=True, exist_ok=True)
    userjs = profile / "user.js"
    lines = [BANNER.format(count=len(prefs))]
    for k, v in prefs.items():
        js_val = json.dumps(v)  # renders true/false/"string"
        lines.append(f'user_pref("{k}", {js_val});')
    data = "\n".join(lines) + "\n"

    if dry:
        print(f"--- {userjs} ---\n{data}")
    else:
        userjs.write_text(data, encoding="utf-8")
        print(f"Wrote {userjs}")

# ---------------------------------------------------------------------------

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Silence Firefox background traffic")
    p.add_argument("--profile", metavar="DIR",
                   help="Path to a single Firefox profile to modify")
    p.add_argument("--dry-run", action="store_true",
                   help="Show what would be written, do not touch the disk")
    args = p.parse_args()

    targets = [Path(args.profile)] if args.profile else platform_profiles()
    if not targets:
        p.error("No Firefox profiles found. Use --profile to specify one manually.")

    for prof in targets:
        write_userjs(prof, PREFS, args.dry_run)
